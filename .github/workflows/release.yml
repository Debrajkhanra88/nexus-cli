name: Release

# Trigger the workflow on:
# - A push event that creates a tag starting with 'v' (e.g., v1.0.0)
# - A manual trigger via the GitHub Actions UI, with an optional input
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release from the latest tag'
        required: true
        type: boolean
        default: false

jobs:
  build:
    # Define a job to build binaries for multiple OS targets
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest] # todo: ubuntu-latest, windows-latest
        # Map each OS to its Rust target and desired artifact name
        include:
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: nexus-network-macos-arm64
          # TODO: Ubuntu
          # TODO: Windows

    steps:
      # Check out the repository source code
      - name: Checkout source
        uses: actions/checkout@v4

      # Set up the Rust toolchain for the specified target
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly-2025-01-02
          target: ${{ matrix.target }}
          components: rustfmt


      - name: Verify toolchain (debug)
        run: |
          echo "Rust version: $(rustc --version)"
          echo "Rustfmt version: $(rustfmt --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Target: $(rustc --print target)"
          echo "Host: $(rustc --print host)" 

      # Build the release binary for the specified target
      - name: Build CLI binary
        working-directory: clients/cli
        run: cargo build --release
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"

      # Rename the binary to indicate the target OS
      - name: Rename binary
        run: |
          cp clients/cli/target/release/nexus-network clients/cli/target/release/${{ matrix.artifact_name }}

      # Upload the binary as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: clients/cli/target/release/${{ matrix.artifact_name }}

#      # Upload the built binary as an artifact
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ matrix.artifact_name }}
#          path: clients/cli/target/release/nexus-network${{ matrix.os == 'windows-latest' && '.exe' || '' }}


  release:
    # Define a separate job to create the GitHub release
    name: Create Release
    needs: build
    if: github.event.inputs.create_release == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      # Check out the repo again (needed to include metadata like tags)
      - uses: actions/checkout@v4

      # Download all build artifacts uploaded by the matrix build
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true # Merge multiple artifacts into a single directory

      - name: List downloaded artifacts (debug)
        run: ls -R artifacts

      # Use the `gh-release` action to publish a release with the downloaded binaries
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/nexus-network-macos-arm64
          # files: |
          #   artifacts/nexus-network-linux-x86_64
          #  artifacts/nexus-network-linux-arm64
          #  artifacts/nexus-network-macos-x86_64
          #  artifacts/nexus-network-macos-arm64
          #  artifacts/nexus-network-windows-x86_64.exe
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
