syntax = "proto3";

package nexus.orchestrator;

service Orchestrator {
  // Request a proof for a program.
  rpc RequestProof(ProofRequest) returns (ProofResponse) {}

  // Compile a Rust program to an ELF binary for use by clients that don't
  // support compiling programs themselves.
  rpc Compile(CompileRequest) returns (CompileResponse) {}

  // Register a supply node with the network of compute governed by the
  // orchestrator.
  rpc AddProver(stream ProverRequest) returns (stream ProverResponse) {}
}

message ProofRequest {
  CompiledProgram program = 1;

  VMProgramInput input = 2;
}

message ProofResponse {
  Proof proof = 1;
}

// A message that always represents a program runnable on the Nexus VM.
message CompiledProgram {
  oneof program {
    // ELF binary containing a program to be proved, expressed in the RV32I ISA.
    bytes rv32i_elf_bytes = 1;
  }
}

message VMProgramInput {
  oneof input {
    // Input expressed as raw bytes to be read as-is off of the input tape.
    bytes raw_bytes = 1;
  }
}

message Proof {
  oneof proof {
    bytes nova_bytes = 1;
  }
}

message ProgramSource {
  // The source code to be compiled. There will be a variety of languages and
  // ways to express everything a program needs for compilation (dependencies,
  // multiple files, etc.) as our scope expands.
  oneof source {
    // Option to use when the program in question can be expressed as a single
    // rust file (i.e., a program written in the playground).
    string rust_single_file = 1;
  }
}

message CompileRequest {
  ProgramSource source = 1;
}

message CompileResponse {
  CompiledProgram program = 1;
}

// Streamed messages sent to the orchestrator to keep it updated with the
// prover's status.
message ProverRequest {
  oneof contents {
    // Details about this supply node for use by the orchestrator.
    ProverRequestRegistration registration = 1;

    // A completed proof.
    Proof proof = 2;

    // Periodic progress update for the current proof. This is currently
    // expected to be a number between zero and one, inclusive. In the future,
    // we can deprecate this or augment it with more info.
    float progress = 3;

    // Periodic liveness indicator when no proof is being computed.
    Heartbeat heartbeat = 4;
  }
}

enum ProverType {
  PROVER_TYPE_UNSPECIFIED = 0;
  PROVER_TYPE_VOLUNTEER = 1;
}

// Metadata that helps the orchestrator schedule work to the requesting compute
// supplier.
message ProverRequestRegistration {
  // What type of prover this is. For now, we only have volunteers.
  ProverType prover_type = 1;
}

message ProverResponse {
  // Forward the literal request for now
  ProofRequest to_prove = 1;
}

message Heartbeat {
}